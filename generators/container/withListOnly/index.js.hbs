/**
*
* {{ titleCase name }} Page
*
*/
import React, { Component } from 'react';
import { Card } from 'antd';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import PropTypes from 'prop-types';
import { Helmet } from 'react-helmet';

import injectReducer from '../../utils/injectReducer';
import injectSaga from '../../utils/injectSaga';
import {
  makeSelectError,
  makeSelect{{ properCase name }}s,
  makeSelect{{ properCase name }}sLoading,
} from './selectors';
import { load{{ properCase name }}s } from './actions';
import reducer from './reducer';
import saga from './saga';

class {{ properCase name }}Page extends Component {
  componentDidMount() {
    this.props.load{{ properCase name }}s();
  }
  renderHead() {
    return (
      <Helmet>
        <title>{{ properCase name }} Page</title>
      </Helmet>
    );
  }
  render() {
    const { renderHead } = this;
    return (
      <div className="{{ dashCase name }}-page">
        {renderHead()}
        <h1>{{ properCase name }} Page</h1>
        <Card>

        </Card>
      </div>
    );
  }
}

{{ properCase name }}Page.propTypes = {
  error: PropTypes.object,
  {{ camelCase name }}s: PropTypes.array.isRequired,
  loading: PropTypes.bool.isRequired,
  load{{ properCase name }}s: PropTypes.func.isRequired,
};

const mapStateToProps = createStructuredSelector({
  error: makeSelectError(),
  {{ camelCase name }}s: makeSelect{{ properCase name }}s(),
  loading: makeSelect{{ properCase name }}sLoading(),
});

const mapDispatchToProps = (dispatch) => ({
  load{{ properCase name }}s: () => dispatch(load{{ properCase name }}s()),
});

const withConnect = connect(mapStateToProps, mapDispatchToProps);
const withReducer = injectReducer({ key: '{{ camelCase name }}s', reducer });
const withSaga = injectSaga({ key: '{{ camelCase name }}s', saga });
export default compose(withReducer, withSaga, withConnect)({{ properCase name }}Page);
